language: julia

os:
  - linux
  - osx

julia:
  - release

notifications:
  email: false

before_install:
  - if [ `uname` == "Linux" ]; then
    wget --no-check-certificate http://www.cmake.org/files/v3.2/cmake-3.2.1-Linux-x86_64.tar.gz;
    tar -xzf cmake-3.2.1-Linux-x86_64.tar.gz;
    sudo cp -fR cmake-3.2.1-Linux-x86_64/* /usr;
    export PATH=`pwd`/cmake-3.2.1-Linux-x86_64/bin:$PATH; fi
  - which cmake
  - cmake --version
  - julia -e 'Pkg.clone("https://github.com/JuliaOptimizers/NLPModels.jl.git")'
  - julia -e 'Pkg.checkout("NLPModels", "develop")'
  - julia -e 'Pkg.clone("https://github.com/JuliaOptimizers/OptimizationProblems.jl.git")'
  - julia -e 'Pkg.add("DistributedArrays"); Pkg.build("DistributedArrays")'
  - julia -e 'Pkg.clone("https://github.com/optimizers/Krylov.jl.git")'
  - julia -e 'Pkg.checkout("Krylov", "develop")'
  - julia -e 'Pkg.clone("https://github.com/dpo/LinearOperators.jl.git")'
  - julia -e 'Pkg.checkout("LinearOperators", "develop")'
  - julia -e 'Pkg.clone("https://github.com/JuliaOptimizers/AmplNLReader.jl.git")'
  - julia -e 'Pkg.checkout("AmplNLReader", "nlpmodel")'
  - julia -e 'Pkg.build("AmplNLReader")'
  - julia -e 'Pkg.clone("https://github.com/JuliaOptimizers/Profiles.jl.git")'

before_install:
  - if [[ -a .git/shallow ]]; then git fetch --unshallow; fi

install:
  - julia -e 'versioninfo()'
  - julia -E 'Pkg.clone(pwd())'
  - julia -E 'Pkg.build("Optimize")'

script:
  - julia --check-bounds=yes -E 'Pkg.test("Optimize", coverage=true)'

after_success:
  - julia -e 'cd(Pkg.dir("Optimize")); Pkg.add("Coverage"); using Coverage; Coveralls.submit(Coveralls.process_folder())'
